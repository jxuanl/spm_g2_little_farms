name: Integration Tests

on:
  push:
    # branches: [ main, develop ]
    branches: [ task-management-aiden ]
  pull_request:
    # branches: [ main, develop ]
    branches: [ task-management-aiden ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            little_farms/backend/package-lock.json
            tests/package-lock.json
      
      - name: Cache Firebase Emulators
        uses: actions/cache@v4
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-emulators-${{ hashFiles('firebase.json') }}
          restore-keys: |
            ${{ runner.os }}-firebase-emulators-
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      
      - name: Install backend dependencies
        working-directory: ./little_farms/backend
        run: npm ci
      
      - name: Install test dependencies
        working-directory: ./tests
        run: npm install
      
      - name: Create test environment file
        working-directory: ./little_farms/backend
        run: |
          cat > .env.test << EOF
          FIREBASE_PROJECT_ID=test-project
          FIRESTORE_EMULATOR_HOST=localhost:8080
          NODE_ENV=test
          PORT=3002
          EOF
      
      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only firestore,auth --project=test-project 2>&1 | tee emulator.log &
          EMULATOR_PID=$!
          echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV
          echo "Firebase emulators starting (PID: $EMULATOR_PID)..."
      
      - name: Wait for Firebase Emulators
        run: |
          echo "Waiting for Firestore emulator on port 8080..."
          timeout 60 bash -c 'until curl -s http://localhost:8080 > /dev/null; do sleep 2; done'
          echo "Waiting for Auth emulator on port 9099..."
          timeout 60 bash -c 'until curl -s http://localhost:9099 > /dev/null; do sleep 2; done'
          echo "✅ Firebase emulators are ready!"
      
      - name: Run integration tests
        working-directory: ./tests
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          NODE_ENV: test
        run: npm test -- --coverage --ci
      
      - name: Generate coverage report
        working-directory: ./tests
        run: npm run test:coverage || true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./tests/coverage/lcov.info
          flags: integration-tests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testResults = '✅ Integration tests passed!';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Test Results\n\n${testResults}\n\nNode.js version: ${{ matrix.node-version }}`
            });
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            tests/coverage/
            tests/*.log
          retention-days: 30
      
      - name: Show Emulator Logs
        if: failure()
        run: |
          echo "=== Emulator Logs ==="
          cat emulator.log || echo "No emulator logs found"
      
      - name: Stop Firebase Emulators
        if: always()
        run: |
          pkill -f "firebase.*emulators" || true
          sleep 2

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ All tests passed!"
            exit 0
          else
            echo "❌ Some tests failed"
            exit 1
          fi
